name: Docker Image

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full history including tags

      - name: Ensure Git Repository is Not Shallow
        run: |
          if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
            git fetch --prune --unshallow
          else
            echo "Repository is already fully cloned."
          fi

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Increment Version
        id: increment_version
        run: |
          latest_tag=${{ env.latest_tag }}
          echo "Latest tag: $latest_tag"
          version=${latest_tag#v}
          major=$(echo $version | cut -d. -f1)
          minor=$(echo $version | cut -d. -f2)
          patch=$(echo $version | cut -d. -f3)
          new_version="v$major.$minor.$((patch + 1))"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          docker build --no-cache -t eliekh05/macos:${{ env.new_version }} .

      - name: Save Docker Image to File
        run: |
          docker save eliekh05/macos:${{ env.new_version }} | gzip > macOS_${{ env.new_version }}.tar.gz

      - name: Upload Docker Image as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: macOS_image
          path: macOS_${{ env.new_version }}.tar.gz

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: eliekh05
          password: dckr_pat_92RfzaNvwyPUYyV6IXrQLE37BHA  # Test password

      - name: Push Docker Image
        run: |
          docker push eliekh05/macos:${{ env.new_version }}
          docker push eliekh05/macos:latest

      - name: Create and Push Git Tag
        run: |
          new_version=${{ env.new_version }}
          if [ -z "$new_version" ]; then
            echo "Error: new_version is empty"
            exit 1
          fi
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag $new_version
          git push origin $new_version

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.new_version }}
          name: Release ${{ env.new_version }}
          body: |
            Release notes for ${{ env.new_version }}
            Added Docker image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Docker Image to GitHub Release
        run: |
          gh release upload ${{ env.new_version }} macOS_${{ env.new_version }}.tar.gz --repo eliekh05/macos
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
